{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "VCL",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#subroutines"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.vcl",
					"match": "(;.*?$)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.vcl",
					"match": "\\b(?i)(call|if|else|else if|while|begin_module|end_module|enter)\\b"
				},
				{
					"name": "keyword.other",
					"match": "\\b(?i)(call|constant|variable|create)\\b"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.vcl"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.vcl"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.vcl"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.vcl"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.vcl"
				},
				{
					"match": "\\b(?i)(goto|return|equals|bit)\\b",
					"name": "keyword.reserved.vcl"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.vcl",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.vcl",
							"match": "\\."
						}
					]
				}
			]
		},
		"functions": {
			"patterns":[
				{
					"name": "meta.function-call.vcl",
					"begin": "(\\s*(?!(?i)if|else if|while)([A-Za-z_$][\\w$]*)\\s*(?=(\\()))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.period.vcl"
						},
						"2": {
							"name": "entity.name.function.vcl"
						},
						"3": {
							"name": "punctuation.definition.parameters.begin.bracket.round.vcl"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.java"
						}
					},
					"patterns": [
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#variables"
						}
				
					]
				}
			]			
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.vcl"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.vcl"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.vcl"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b(?i)(on|off)\\b",
					"name": "constant.language.vcl"
				},
				{
					"name": "constant.language.vcl",
					"match": "(?i)(PSM_)(DECIMAL|DECIMAL_[0-3]|BINARY|HEX|TEX_ONLY)\\b"
				}
			]
		},
		"subroutines": {
			"patterns": [
				{
					"name": "support.function.vcl",
					"match": "\\w*\\:"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.parameter.user.vcl",
					"match": "(?i)(p_user100|p_user[1-9][0-9]|p_user[1-9])\\b"
				},
				{
					"name": "variable.name.user.vcl",
					"match": "(?i)(user100|user[1-9][0-9]|user[1-9])\\b"
				},
				{
					"name": "variable.bitparameter.user.vcl",
					"match": "(?i)(p_user_bit100|p_user_bit[1-9][0-9]|p_user_bit[1-9])\\b"
				},
				{
					"name": "variable.bitname.user.vcl",
					"match": "(?i)(user_bit100|user_bit[1-9][0-9]|user_bit[1-9])\\b"
				},
				{
					"name": "variable.other.switch.vcl",
					"match": "(?i)(sw_[1-9][0-9]|sw_[1-9])\\b"
				},
				{
					"name": "variable.other.pwm.vcl",
					"match": "(?i)(pwm[1-9][0-9]|pwm[1-9])\\b"
				},
				{
					"name": "variable.other.delay.vcl",
					"match": "(?i)(dly1[0-6]|dly[1-9])\\b"
				},
				{
					"name": "variable.other.timer.vcl",
					"match": "(?i)(tmr[1-3])(|_ms_output|_sec_output|_hr_output|_enable)\\b"
				},
				{
					"name": "variable.other.abs.vcl",
					"match": "(?i)(abs1[1-2])(|_output)\\b"
				},
				{
					"name": "variable.other.mtd.vcl",
					"match": "(?i)(mtd[1-4])(|_output)\\b"
				},
				{
					"name": "variable.other.scl.vcl",
					"match": "(?i)(scl[1-4])(|_output|_sf)\\b"
				},
				{
					"name": "variable.other.copy.vcl",
					"match": "(?i)(cpy[1-4])\\b"
				},
				{
					"name": "variable.other.filter.vcl",
					"match": "(?i)(flt[1-4])(|_output)\\b"
				},
				{
					"name": "variable.other.limit.vcl",
					"match": "(?i)(lim[1-4])(|_output|_limit)\\b"
				},
				{
					"name": "variable.other.map.vcl",
					"match": "(?i)(map[1-4])(|_output|_segment)\\b"
				},
				{
					"name": "variable.other.ramp.vcl",
					"match": "(?i)(rmp[1-4])(|_output|_hold)\\b"
				},
				{
					"name": "variable.other.selectorswitch.vcl",
					"match": "(?i)(sel[1-8])(|_output|_4p_n_output|_select|_4p_select)\\b"
				},
				{
					"name": "variable.other.pid.vcl",
					"match": "(?i)(pid[1-2])(|_output)\\b"
				},
				{
					"name": "variable.other.nvm.vcl",
					"match": "(?i)(nv)(m40|m[1-3][0-9]|m[1-9]|m_restore_source|m_result|m_status|user1[0-5]|user[1-9])\\b"
				},
				{
					"name": "variable.other.nvmparameters.vcl",
					"match": "(?i)(parameter_)(interlock_key|defaults_restore_source)\\b"
				},
				{
					"name": "variable.other.sys.vcl",
					"match": "(?i)(sys_restored_)(pfb|per|not)\\b"
				},
				{
					"name": "variable.other.sys.extendedfaultlogging.vcl",
					"match": "(?i)(extended_log_)(fault_code|time_stamp|value_[1-5]|map_length|[1-5]_map_object_ID|write_index|read_index)\\b"
				},
				{
					"name": "variable.other.vclinterpreter.vcl",
					"match": "(?i)(user120|user1[0-1][0-9]|user[1-9][0-9]|user[1-9]|user_bit10|user_bit[1-9]|p_user100|p_user[1-9][0-9]|p_user[1-9]|p_user_bit10|p_user_bit[1-9]|vcl_app_ver|vcl_ipms|vcl_ipms_min)\\b"
				},
				{
					"name": "variable.other.serial.vcl",
					"match": "(?i)(BR)(9600|19200|38400|57600|115200)\\b"
				},
				{
					"name": "variable.other.spyglass.vcl",
					"match": "(?i)(protocol_)(tty|1|2)\\b"
				}
				
			]
		}
		


	},
	"scopeName": "source.vcl"
}